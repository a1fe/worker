#!/bin/bash
# Health Check –¥–ª—è Pump Bot Worker

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKER_DIR="$(dirname "$SCRIPT_DIR")"

echo "üè• PUMP BOT WORKER - HEALTH CHECK"
echo "================================"
echo ""

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
METRICS_PORT=${METRICS_PORT:-8081}
PID_FILE="$WORKER_DIR/worker.pid"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞..."
if [[ -f "$PID_FILE" ]]; then
    PID=$(cat "$PID_FILE")
    if ps -p $PID > /dev/null 2>&1; then
        echo "‚úÖ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
        WORKER_RUNNING=true
    else
        echo "‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
        rm -f "$PID_FILE"
        WORKER_RUNNING=false
    fi
else
    WORKER_PIDS=$(pgrep -f "python.*worker_app" || true)
    if [[ -n "$WORKER_PIDS" ]]; then
        echo "‚úÖ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $WORKER_PIDS)"
        WORKER_RUNNING=true
    else
        echo "‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        WORKER_RUNNING=false
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫..."
if command -v curl &> /dev/null; then
    if curl -s "http://localhost:$METRICS_PORT/health" > /dev/null 2>&1; then
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $METRICS_PORT"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        HEALTH_RESPONSE=$(curl -s "http://localhost:$METRICS_PORT/health" 2>/dev/null)
        if [[ -n "$HEALTH_RESPONSE" ]]; then
            echo "üìã –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞:"
            echo "$HEALTH_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$HEALTH_RESPONSE"
        fi
    else
        echo "‚ùå –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $METRICS_PORT"
    fi
else
    echo "‚ö†Ô∏è  curl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
echo ""
echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
LOG_FILE="$WORKER_DIR/logs/worker.log"
if [[ -f "$LOG_FILE" ]]; then
    echo "‚úÖ –õ–æ–≥-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    
    # –†–∞–∑–º–µ—Ä –ª–æ–≥–∞
    LOG_SIZE=$(du -h "$LOG_FILE" | cut -f1)
    echo "üìè –†–∞–∑–º–µ—Ä –ª–æ–≥–∞: $LOG_SIZE"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    RECENT_ERRORS=$(tail -n 100 "$LOG_FILE" | grep -i "error\|exception\|failed" | tail -n 5)
    if [[ -n "$RECENT_ERRORS" ]]; then
        echo "‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        echo "$RECENT_ERRORS"
    else
        echo "‚úÖ –û—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    LAST_LOG_LINE=$(tail -n 1 "$LOG_FILE" 2>/dev/null)
    if [[ -n "$LAST_LOG_LINE" ]]; then
        echo "üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ:"
        echo "$LAST_LOG_LINE"
    fi
else
    echo "‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo ""
echo "‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
ENV_FILE="$WORKER_DIR/.env"
if [[ -f "$ENV_FILE" ]]; then
    echo "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if grep -q "COORDINATOR_WS_URL" "$ENV_FILE" && ! grep -q "your-coordinator" "$ENV_FILE"; then
        echo "‚úÖ COORDINATOR_WS_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå COORDINATOR_WS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    if grep -q "API_KEY" "$ENV_FILE" && ! grep -q "your-api-key" "$ENV_FILE"; then
        echo "‚úÖ API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    if grep -q "SOLANA_PRIVATE_KEY" "$ENV_FILE" && ! grep -q "your-solana-private-key" "$ENV_FILE"; then
        echo "‚úÖ SOLANA_PRIVATE_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå SOLANA_PRIVATE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
else
    echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $ENV_FILE"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
echo ""
echo "üíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."

# –ü–∞–º—è—Ç—å
if command -v free &> /dev/null; then
    MEMORY_INFO=$(free -h | grep "Mem:")
    echo "üß† –ü–∞–º—è—Ç—å: $MEMORY_INFO"
elif command -v vm_stat &> /dev/null; then
    # macOS
    MEMORY_PRESSURE=$(memory_pressure 2>/dev/null | head -1 || echo "Memory pressure: unknown")
    echo "üß† $MEMORY_PRESSURE"
fi

# –î–∏—Å–∫
DISK_USAGE=$(df -h "$WORKER_DIR" | tail -1)
echo "üíæ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: $DISK_USAGE"

# CPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
if command -v top &> /dev/null; then
    if [[ "$WORKER_RUNNING" == "true" && -n "$PID" ]]; then
        CPU_USAGE=$(top -p $PID -b -n1 2>/dev/null | grep "$PID" | awk '{print $9}' || echo "N/A")
        echo "‚ö° CPU –≤–æ—Ä–∫–µ—Ä–∞: ${CPU_USAGE}%"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ coordinator URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [[ -f "$ENV_FILE" ]]; then
    COORDINATOR_URL=$(grep "COORDINATOR_WS_URL" "$ENV_FILE" | cut -d'=' -f2 | tr -d '"'"'"' | tr -d ' ')
    if [[ -n "$COORDINATOR_URL" ]]; then
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ WebSocket URL –≤ HTTP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        HTTP_URL=${COORDINATOR_URL//ws:/http:}
        HTTP_URL=${HTTP_URL//wss:/https:}
        HTTP_URL=${HTTP_URL%/ws/coordinator}
        
        echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É: $HTTP_URL"
        
        if command -v curl &> /dev/null; then
            if curl -s --max-time 5 "$HTTP_URL/health" > /dev/null 2>&1; then
                echo "‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
                echo "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
        fi
    fi
fi

# –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
echo ""
echo "="*50
echo "üìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°"
echo "="*50

if [[ "$WORKER_RUNNING" == "true" ]]; then
    echo "üü¢ –í–û–†–ö–ï–†: –ó–ê–ü–£–©–ï–ù"
else
    echo "üî¥ –í–û–†–ö–ï–†: –û–°–¢–ê–ù–û–í–õ–ï–ù"
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo ""
echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
if [[ "$WORKER_RUNNING" != "true" ]]; then
    echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞: ./start.sh"
fi

if [[ ! -f "$ENV_FILE" ]] || grep -q "your-coordinator\|your-api-key" "$ENV_FILE" 2>/dev/null; then
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª"
fi

echo "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: tail -f logs/worker.log"
echo "   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:$METRICS_PORT/metrics"
echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: http://localhost:$METRICS_PORT/health"

echo ""
