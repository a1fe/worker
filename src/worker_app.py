"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pump Bot Worker.
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Solana.
"""

import asyncio
import json
import logging
import signal
import sys
import time
import traceback
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import os

import websockets
from websockets import State
import httpx
from solders.keypair import Keypair
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from solders.transaction import Transaction
import base58

from .config import get_config, WorkerConfig
from .encryption_utils import EncryptionUtils
from .pump_trading import TradingEngine, TradeResult
from .worker_metrics import start_worker_metrics_server, WorkerMetricsCollector


class WorkerApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞."""

    def __init__(self, config: Optional[WorkerConfig] = None):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = config or get_config()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.worker_id = self.config.worker_id
        self.coordinator_ws_url = self.config.coordinator_ws_url
        self.websocket = None
        self.is_running = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 10

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        self.metrics = None
        if self.config.metrics_enabled:
            self.metrics = start_worker_metrics_server(
                self.worker_id, self.config.metrics_port
            )
            if self.metrics:
                self.metrics.set_worker_status("initializing")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.worker_private_key = self.config.worker_private_key_x25519
        self.coordinator_public_key = self.config.coordinator_public_key_x25519
        self.shared_key = None

        # –ö–æ—à–µ–ª—å–∫–∏ (–∏–Ω–¥–µ–∫—Å -> Keypair)
        self.wallets: Dict[int, Keypair] = {}
        
        # –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        self.trading_engine = None

        # HTTP –∫–ª–∏–µ–Ω—Ç
        self.http_client = None
        
        # Solana –∫–ª–∏–µ–Ω—Ç
        self.solana_client = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": datetime.now(timezone.utc),
            "messages_sent": 0,
            "messages_received": 0,
            "trades_executed": 0,
            "errors": 0,
            "last_heartbeat": None
        }

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self._setup_signal_handlers()

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = os.path.dirname(self.config.log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = getattr(logging, self.config.log_level.upper(), logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–æ–≤
        handlers = []
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.config.log_file:
            from logging.handlers import RotatingFileHandler
            file_handler = RotatingFileHandler(
                self.config.log_file,
                maxBytes=self._parse_size(self.config.log_max_size),
                backupCount=self.config.log_backup_count
            )
            file_handler.setFormatter(formatter)
            handlers.append(file_handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        handlers.append(console_handler)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logging.basicConfig(
            level=log_level,
            handlers=handlers,
            force=True
        )

    def _parse_size(self, size_str: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '50MB')."""
        size_str = size_str.upper()
        if size_str.endswith('MB'):
            return int(size_str[:-2]) * 1024 * 1024
        elif size_str.endswith('KB'):
            return int(size_str[:-2]) * 1024
        elif size_str.endswith('GB'):
            return int(size_str[:-2]) * 1024 * 1024 * 1024
        else:
            return int(size_str)

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            asyncio.create_task(self.shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞."""
        self.logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pump Bot Worker: {self.worker_id}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            await self._initialize_encryption()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
            await self._initialize_http_client()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∫–ª–∏–µ–Ω—Ç–∞
            await self._initialize_solana_client()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            await self._initialize_trading_engine()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if self.metrics:
                self.metrics.set_worker_status("initialized")
            
            self.logger.info("‚úÖ –í–æ—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            if self.metrics:
                self.metrics.increment_errors()
            raise

    async def _initialize_encryption(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
        if not self.config.encryption_enabled:
            self.logger.info("üîì –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return

        if not self.worker_private_key or not self.coordinator_public_key:
            self.logger.warning("‚ö†Ô∏è –ö–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        try:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞
            self.shared_key = EncryptionUtils.perform_key_exchange_x25519(
                self.worker_private_key, self.coordinator_public_key
            )
            self.logger.info("üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def _initialize_http_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞."""
        timeout = httpx.Timeout(30.0)
        limits = httpx.Limits(
            max_keepalive_connections=self.config.http_pool_size,
            max_connections=self.config.http_pool_size * 2
        )
        
        self.http_client = httpx.AsyncClient(
            timeout=timeout,
            limits=limits,
            proxy=self.config.proxy_url
        )
        
        self.logger.info("üåê HTTP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _initialize_solana_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            rpc_urls = self.config.get_solana_rpc_urls()
            self.solana_client = AsyncClient(
                rpc_urls[0],
                commitment=self.config.solana_commitment,
                timeout=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self.solana_client.get_health()
            self.logger.info(f"üîó Solana –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {rpc_urls[0]}")
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")

    async def _initialize_trading_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞."""
        try:
            self.trading_engine = TradingEngine(
                config=self.config,
                solana_client=self.solana_client,
                http_client=self.http_client,
                logger=self.logger
            )
            
            await self.trading_engine.initialize()
            self.logger.info("üí∞ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")

    async def connect_to_coordinator(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."""
        self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É: {self.coordinator_ws_url}")
        
        retry_delay = self.config.retry_delay
        
        while self.is_running and self.reconnect_attempts < self.max_reconnect_attempts:
            try:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
                self.websocket = await websockets.connect(
                    self.coordinator_ws_url,
                    ping_interval=self.config.ws_ping_interval,
                    ping_timeout=self.config.ws_ping_timeout,
                    close_timeout=10
                )
                
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É")
                self.reconnect_attempts = 0
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await self._send_registration()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                if self.metrics:
                    self.metrics.set_worker_status("connected")
                
                return True
                
            except Exception as e:
                self.reconnect_attempts += 1
                self.logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_attempts}): {e}"
                )
                
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    self.logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= self.config.backoff_factor
                
                if self.metrics:
                    self.metrics.increment_errors()
        
        return False

    async def _send_registration(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        registration_message = {
            "type": "register",
            "api_key": self.config.api_key,
            "worker_id": self.worker_id,
            "worker_public_key_x25519_base64": self.config.worker_public_key_x25519,
            "region": self.config.worker_region,
            "capabilities": self.config.get_capabilities(),
            "status": "ready",
            "metadata": {
                "version": "2.0.0",
                "name": self.config.worker_name,
                "description": self.config.worker_description,
                "max_wallets": self.config.max_wallets_per_worker,
                "max_concurrent_trades": self.config.max_concurrent_trades,
            }
        }
        
        await self._send_message(registration_message)
        self.logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    async def _send_message(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."""
        if not self.websocket or self.websocket.closed:
            raise RuntimeError("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        try:
            message_json = json.dumps(message)
            
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.config.encryption_enabled and self.shared_key:
                encrypted_data = self._encrypt_message(message_json)
                final_message = {
                    "type": "encrypted",
                    "data": encrypted_data
                }
                message_json = json.dumps(final_message)
            
            await self.websocket.send(message_json)
            self.stats["messages_sent"] += 1
            
            if self.config.debug_websocket:
                self.logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.get('type', 'unknown')}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if self.metrics:
                self.metrics.increment_errors()
            raise

    def _encrypt_message(self, message: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            ciphertext, nonce, tag = EncryptionUtils.encrypt_aes_gcm(
                message, self.shared_key
            )
            return f"{ciphertext}:{nonce}:{tag}"
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    def _decrypt_message(self, encrypted_data: str) -> str:
        """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            parts = encrypted_data.split(":")
            if len(parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            ciphertext, nonce, tag = parts
            return EncryptionUtils.decrypt_aes_gcm(
                ciphertext, nonce, tag, self.shared_key
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    async def message_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.logger.info("üëÇ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        try:
            async for message in self.websocket:
                await self._process_message(message)
                
        except websockets.exceptions.ConnectionClosed:
            self.logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            if self.metrics:
                self.metrics.increment_errors()

    async def _process_message(self, raw_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            message = json.loads(raw_message)
            self.stats["messages_received"] += 1
            
            if self.config.debug_websocket:
                self.logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {message.get('type', 'unknown')}")
            
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if message.get("type") == "encrypted":
                decrypted = self._decrypt_message(message["data"])
                message = json.loads(decrypted)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_type = message.get("type")
            
            if message_type == "registration_success":
                await self._handle_registration_success(message)
            elif message_type == "registration_error":
                await self._handle_registration_error(message)
            elif message_type == "pump_command":
                await self._handle_pump_command(message)
            elif message_type == "heartbeat_request":
                await self._handle_heartbeat_request(message)
            elif message_type == "wallet_assignment":
                await self._handle_wallet_assignment(message)
            elif message_type == "status_request":
                await self._handle_status_request(message)
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if self.metrics:
                self.metrics.increment_errors()

    async def _handle_registration_success(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        self.logger.info("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        coordinator_key = message.get("coordinator_public_key_x25519")
        if coordinator_key and not self.coordinator_public_key:
            self.coordinator_public_key = coordinator_key
            await self._initialize_encryption()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        if self.metrics:
            self.metrics.set_worker_status("registered")

    async def _handle_registration_error(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        error_msg = message.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        await self.shutdown()

    async def _handle_pump_command(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–∞–º–ø–∞."""
        try:
            self.logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–∞–º–ø–∞: {message.get('token_address')}")
            
            if not self.trading_engine:
                raise ValueError("–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            result = await self.trading_engine.execute_pump_trade(message)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            response = {
                "type": "pump_result",
                "worker_id": self.worker_id,
                "command_id": message.get("command_id"),
                "result": result.to_dict(),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            await self._send_message(response)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats["trades_executed"] += 1
            if self.metrics:
                self.metrics.increment_trades()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º–ø–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏
            error_response = {
                "type": "pump_error",
                "worker_id": self.worker_id,
                "command_id": message.get("command_id"),
                "error": str(e),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            await self._send_message(error_response)
            
            if self.metrics:
                self.metrics.increment_errors()

    async def _handle_heartbeat_request(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ heartbeat."""
        response = {
            "type": "heartbeat_ack",
            "worker_id": self.worker_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "status": "active",
            "stats": self.stats.copy(),
            "health": await self._get_health_status()
        }
        
        await self._send_message(response)
        self.stats["last_heartbeat"] = datetime.now(timezone.utc)

    async def _handle_wallet_assignment(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            wallet_index = message.get("wallet_index")
            encrypted_key = message.get("encrypted_private_key")
            
            if not self.shared_key:
                raise ValueError("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            private_key_base58 = EncryptionUtils.decrypt_wallet_key(
                encrypted_key, self.shared_key
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Keypair
            private_key_bytes = base58.b58decode(private_key_base58)
            keypair = Keypair.from_bytes(private_key_bytes)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            self.wallets[wallet_index] = keypair
            
            self.logger.info(f"üí≥ –ù–∞–∑–Ω–∞—á–µ–Ω –∫–æ—à–µ–ª–µ–∫ {wallet_index}: {keypair.pubkey()}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = {
                "type": "wallet_assigned",
                "worker_id": self.worker_id,
                "wallet_index": wallet_index,
                "public_key": str(keypair.pubkey()),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
            await self._send_message(response)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")

    async def _handle_status_request(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞."""
        status = {
            "type": "worker_status",
            "worker_id": self.worker_id,
            "status": "active" if self.is_running else "inactive",
            "uptime": (datetime.now(timezone.utc) - self.stats["start_time"]).total_seconds(),
            "stats": self.stats.copy(),
            "config": {
                "region": self.config.worker_region,
                "capabilities": self.config.get_capabilities(),
                "max_wallets": self.config.max_wallets_per_worker,
                "max_concurrent_trades": self.config.max_concurrent_trades
            },
            "health": await self._get_health_status(),
            "wallets": len(self.wallets),
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        await self._send_message(status)

    async def _get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–∞."""
        health = {
            "overall": "healthy",
            "websocket": "connected" if self.websocket and not self.websocket.closed else "disconnected",
            "solana_client": "unknown",
            "trading_engine": "unknown",
            "memory_usage": 0,
            "errors_24h": self.stats.get("errors", 0)
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana –∫–ª–∏–µ–Ω—Ç–∞
            if self.solana_client:
                await self.solana_client.get_health()
                health["solana_client"] = "healthy"
        except:
            health["solana_client"] = "unhealthy"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        if self.trading_engine:
            health["trading_engine"] = "ready"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        try:
            import psutil
            process = psutil.Process()
            health["memory_usage"] = process.memory_info().rss / 1024 / 1024  # MB
        except:
            pass
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if health["websocket"] != "connected" or health["solana_client"] == "unhealthy":
            health["overall"] = "degraded"
        
        if health["errors_24h"] > 100:
            health["overall"] = "unhealthy"
        
        return health

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞."""
        self.is_running = True
        self.logger.info("üèÉ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.is_running:
                try:
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
                    if not await self.connect_to_coordinator():
                        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É")
                        break
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    await self.message_handler()
                    
                except websockets.exceptions.ConnectionClosed:
                    self.logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    if self.metrics:
                        self.metrics.increment_errors()
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                if self.is_running:
                    self.logger.info("‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                    
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.metrics:
                self.metrics.set_worker_status("error")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞."""
        if not self.is_running:
            return
            
        self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞...")
        self.is_running = False
        
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
            if self.websocket and not self.websocket.closed:
                await self.websocket.close()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
            if self.http_client:
                await self.http_client.aclose()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ Solana –∫–ª–∏–µ–Ω—Ç–∞
            if self.solana_client:
                await self.solana_client.close()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            if self.trading_engine:
                await self.trading_engine.shutdown()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if self.metrics:
                self.metrics.set_worker_status("stopped")
            
            self.logger.info("‚úÖ –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
        worker = WorkerApp()
        asyncio.run(worker.run())
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
