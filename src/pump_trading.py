"""
–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Pump Bot Worker.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ Solana.
"""

import asyncio
import json
import logging
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict

import httpx
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from solders.keypair import Keypair
from solders.transaction import Transaction
from solders.system_program import TransferParams, transfer
from solders.pubkey import Pubkey
import base58


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    success: bool
    transaction_id: Optional[str] = None
    error_message: Optional[str] = None
    token_address: Optional[str] = None
    amount_sol: Optional[float] = None
    price_impact: Optional[float] = None
    gas_used: Optional[int] = None
    execution_time_ms: Optional[int] = None
    timestamp: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return asdict(self)


class TradingEngine:
    """–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞–º–ø–∞."""

    def __init__(self, config, solana_client: AsyncClient, http_client: httpx.AsyncClient, logger: logging.Logger):
        self.config = config
        self.solana_client = solana_client
        self.http_client = http_client
        self.logger = logger
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trade_stats = {
            "total_trades": 0,
            "successful_trades": 0,
            "failed_trades": 0,
            "total_volume_sol": 0.0,
            "average_execution_time": 0.0
        }
        
        # –ö–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_keypair = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.max_slippage = config.max_slippage
        self.trade_amount_sol = config.trade_amount_sol
        
        # –ó–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        self.daily_volume_limit = config.daily_trade_limit_sol
        self.daily_volume_used = 0.0
        self.last_reset_day = datetime.now(timezone.utc).date()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            if self.config.solana_private_key:
                private_key_bytes = base58.b58decode(self.config.solana_private_key)
                self.trading_keypair = Keypair.from_bytes(private_key_bytes)
                
                self.logger.info(f"üí≥ –¢–æ—Ä–≥–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: {self.trading_keypair.pubkey()}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
                balance = await self._get_wallet_balance(self.trading_keypair.pubkey())
                self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.4f} SOL")
                
                if balance < self.trade_amount_sol:
                    self.logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {self.trade_amount_sol} SOL")
            
            else:
                self.logger.warning("‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á Solana –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            raise

    async def execute_pump_trade(self, command: Dict[str, Any]) -> TradeResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞–º–ø–∞."""
        start_time = datetime.now(timezone.utc)
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            token_address = command.get("token_address")
            amount_sol = command.get("amount_sol", self.trade_amount_sol)
            max_slippage = command.get("max_slippage", self.max_slippage)
            
            self.logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º–ø–∞: {token_address}, {amount_sol} SOL")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not token_address:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
            
            if not self.trading_keypair:
                raise ValueError("–¢–æ—Ä–≥–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            await self._check_trade_limits(amount_sol)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if self.config.mock_trading:
                return await self._mock_trade(token_address, amount_sol, start_time)
            
            # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            result = await self._execute_real_trade(
                token_address, amount_sol, max_slippage, start_time
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_trade_stats(result)
            
            return result
            
        except Exception as e:
            execution_time = (datetime.now(timezone.utc) - start_time).total_seconds() * 1000
            
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º–ø–∞: {e}")
            
            return TradeResult(
                success=False,
                error_message=str(e),
                token_address=command.get("token_address"),
                amount_sol=command.get("amount_sol"),
                execution_time_ms=int(execution_time),
                timestamp=datetime.now(timezone.utc).isoformat()
            )

    async def _check_trade_limits(self, amount_sol: float):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤."""
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        current_date = datetime.now(timezone.utc).date()
        if current_date > self.last_reset_day:
            self.daily_volume_used = 0.0
            self.last_reset_day = current_date
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
        if amount_sol > self.config.max_trade_size_sol:
            raise ValueError(f"–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º: {amount_sol} > {self.config.max_trade_size_sol}")
        
        if amount_sol < self.config.min_trade_size_sol:
            raise ValueError(f"–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞: {amount_sol} < {self.config.min_trade_size_sol}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if self.daily_volume_used + amount_sol > self.daily_volume_limit:
            raise ValueError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏: {self.daily_volume_used + amount_sol} > {self.daily_volume_limit}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        balance = await self._get_wallet_balance(self.trading_keypair.pubkey())
        if balance < amount_sol * 1.1:  # 10% –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {balance} < {amount_sol * 1.1}")

    async def _execute_real_trade(self, token_address: str, amount_sol: float, max_slippage: float, start_time: datetime) -> TradeResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
            token_info = await self._get_token_info(token_address)
            if not token_info:
                raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            token_amount = await self._calculate_token_amount(token_address, amount_sol)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = await self._build_pump_transaction(
                token_address, amount_sol, token_amount, max_slippage
            )
            
            # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction.sign([self.trading_keypair])
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_opts = TxOpts(skip_preflight=False, skip_confirmation=False)
            response = await self.solana_client.send_transaction(
                transaction, opts=tx_opts
            )
            
            tx_id = str(response.value)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self._wait_for_confirmation(tx_id)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = (datetime.now(timezone.utc) - start_time).total_seconds() * 1000
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
            self.daily_volume_used += amount_sol
            
            self.logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {tx_id}")
            
            return TradeResult(
                success=True,
                transaction_id=tx_id,
                token_address=token_address,
                amount_sol=amount_sol,
                execution_time_ms=int(execution_time),
                timestamp=datetime.now(timezone.utc).isoformat()
            )
            
        except Exception as e:
            execution_time = (datetime.now(timezone.utc) - start_time).total_seconds() * 1000
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

    async def _mock_trade(self, token_address: str, amount_sol: float, start_time: datetime) -> TradeResult:
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        await asyncio.sleep(0.1)
        
        execution_time = (datetime.now(timezone.utc) - start_time).total_seconds() * 1000
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        fake_tx_id = f"mock_{int(datetime.now().timestamp())}"
        
        self.logger.info(f"üé≠ –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞–º–ø–∞: {token_address}, {amount_sol} SOL")
        
        return TradeResult(
            success=True,
            transaction_id=fake_tx_id,
            token_address=token_address,
            amount_sol=amount_sol,
            execution_time_ms=int(execution_time),
            timestamp=datetime.now(timezone.utc).isoformat()
        )

    async def _get_wallet_balance(self, pubkey: Pubkey) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            response = await self.solana_client.get_balance(pubkey)
            return response.value / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è lamports –≤ SOL
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0

    async def _get_token_info(self, token_address: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ."""
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Jupiter API –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö
            url = f"https://price.jup.ag/v4/price?ids={token_address}"
            
            async with self.http_client.get(url) as response:
                if response.status_code == 200:
                    data = response.json()
                    return data.get("data", {}).get(token_address)
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {e}")
            return None

    async def _calculate_token_amount(self, token_address: str, amount_sol: float) -> int:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
            token_info = await self._get_token_info(token_address)
            if not token_info:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞")
            
            price_sol = float(token_info.get("price", 0))
            if price_sol <= 0:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞")
            
            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
            token_amount = int(amount_sol / price_sol)
            
            self.logger.debug(f"üí∞ –†–∞—Å—á–µ—Ç: {amount_sol} SOL ‚Üí {token_amount} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ {price_sol}")
            
            return token_amount
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            # –§–∏–∫—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
            return int(amount_sol * 1000000)

    async def _build_pump_transaction(self, token_address: str, amount_sol: float, token_amount: int, max_slippage: float) -> Transaction:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–∞–º–ø–∞."""
        try:
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è DEX (Jupiter, Raydium –∏ —Ç.–¥.)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
            recent_blockhash = await self.solana_client.get_latest_blockhash()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è –¥–µ–º–æ)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ swap
            transaction = Transaction()
            transaction.recent_blockhash = recent_blockhash.value.blockhash
            transaction.fee_payer = self.trading_keypair.pubkey()
            
            self.logger.debug(f"üîß –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è {token_address}")
            
            return transaction
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise

    async def _wait_for_confirmation(self, tx_id: str, max_retries: int = 30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        for attempt in range(max_retries):
            try:
                response = await self.solana_client.get_signature_status(tx_id)
                
                if response.value and response.value[0]:
                    status = response.value[0]
                    if status.confirmation_status:
                        self.logger.debug(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {tx_id}")
                        return
                    
                    if status.err:
                        raise ValueError(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {status.err}")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)
                
            except Exception as e:
                if attempt == max_retries - 1:
                    raise ValueError(f"–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                
                await asyncio.sleep(1)
        
        raise ValueError("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

    async def _update_trade_stats(self, result: TradeResult):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        self.trade_stats["total_trades"] += 1
        
        if result.success:
            self.trade_stats["successful_trades"] += 1
            if result.amount_sol:
                self.trade_stats["total_volume_sol"] += result.amount_sol
        else:
            self.trade_stats["failed_trades"] += 1
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if result.execution_time_ms:
            current_avg = self.trade_stats["average_execution_time"]
            total_trades = self.trade_stats["total_trades"]
            new_avg = ((current_avg * (total_trades - 1)) + result.execution_time_ms) / total_trades
            self.trade_stats["average_execution_time"] = new_avg

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        return {
            **self.trade_stats,
            "daily_volume_used": self.daily_volume_used,
            "daily_volume_limit": self.daily_volume_limit,
            "success_rate": (
                self.trade_stats["successful_trades"] / max(self.trade_stats["total_trades"], 1) * 100
            )
        }

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞."""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
        self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
